The ## specifies which SVG file was used.
    'simple_closed' is a chain of four curves
    'pebble' is the same with the word "pebble" outlined in the interior
    'alligator' is alec's alligator

The '======> G1-and-A:' line says whether G1-and-A constraints were used, or just C1 and C0 constraints. When G1-and-A constraints are off (False), we can prefactor or invert the system matrix and just perform back substitution or matrix multiplication. When G1-and-A constraints are on (True), they require an iterative solution that changes the system matrix, so we can't prefactor. In theory we only need to re-do the numeric factorization, but if e.g. the constraint directions align with 0 then the sparsity pattern does change. There's possibly a performance win to be had here, by getting a symbolic factorization for a system we know doesn't have extra zeros.

The first column is the time it takes to solve given new handle transforms. This is literally just measuring back substitution or matrix multiplication time when G1-and-A constraints are off, and otherwise it is measuring rebuilding and refactoring the system each time. The array at the end is the raw data, which was three runs of 100 transform updates.
The second column is which solver was used.
    numpy-inv means the dense system matrix was inverted once, and then multiplied each time a solution was needed. For G1-and-A True, the solution was invalidated immediately.
    numpy-solve means the dense system matrix was never inverted, and each time a solution was needed it was solved anew.
    cvxopt used the sparse matrix solver umfpack. (It also has an interface to cholmod, but cholmod was throwing up arithmetic errors. I thought it could handle, via LDL^T, systems like ours with lagrange multipliers that are symmetric but not positive definite.) Anyhow, this solver exposes symbolic and numeric prefactoring.
    scipy used scipy's sparse matrix solver. I just looked it up, and it's also using umfpack. I thought it was something else. Scipy exposes numeric but not sybmolic factorization.
The third column is which data structure was used to build the system.
    cvxopt is cvxopt's COO (triplet) matrix type
    scipy is scipy's list-of-lists matrix type. (It doesn't show up here because it's painfully slow, so I stopped testing it.)
    numpy is numpy's dense matrix type
The fourth column is a repetition of the SVG file.

## simple_closed
======> G1-and-A: False
time    solver      matrix  SVG             time-per-100-calls
0.0	    numpy-inv	cvxopt	simple_closed	[0.04948306083679199, 0.05718588829040527, 0.06291985511779785]
0.001	cvxopt		cvxopt	simple_closed	[0.07435297966003418, 0.07691311836242676, 0.08206915855407715]
0.001	cvxopt		numpy	simple_closed	[0.0644838809967041, 0.08280396461486816, 0.11086010932922363]
0.001	numpy-inv	numpy	simple_closed	[0.050900936126708984, 0.07137107849121094, 0.07808494567871094]
0.001	numpy-solve	cvxopt	simple_closed	[0.06243491172790527, 0.08510494232177734, 0.09470295906066895]
0.001	numpy-solve	numpy	simple_closed	[0.07941389083862305, 0.08392786979675293, 0.09466886520385742]
0.001	scipy		cvxopt	simple_closed	[0.08273506164550781, 0.08384299278259277, 0.09640693664550781]
0.001	scipy		numpy	simple_closed	[0.0575871467590332, 0.07583403587341309, 0.09609293937683105]
======> G1-and-A: True
0.006	numpy-inv	numpy	simple_closed	[0.6351361274719238, 0.6948978900909424, 0.7618939876556396]
0.007	numpy-inv	cvxopt	simple_closed	[0.7045021057128906, 0.8299751281738281, 0.8617851734161377]
0.007	numpy-solve	numpy	simple_closed	[0.7469639778137207, 0.7809460163116455, 0.9440491199493408]
0.008	cvxopt		cvxopt	simple_closed	[0.7618210315704346, 0.8063337802886963, 0.9067809581756592]
0.008	cvxopt		numpy	simple_closed	[0.7974460124969482, 0.905858039855957, 0.9159848690032959]
0.008	numpy-solve	cvxopt	simple_closed	[0.8210959434509277, 0.8279938697814941, 0.8308520317077637]
0.008	scipy		cvxopt	simple_closed	[0.8173599243164062, 0.9501898288726807, 1.0496690273284912]
0.009	scipy		numpy	simple_closed	[0.8895599842071533, 1.0479600429534912, 1.0489490032196045]
## pebble
======> G1-and-A: False
0.012	numpy-inv	cvxopt	pebble			[1.2344450950622559, 1.2412629127502441, 1.2997798919677734]
0.012	numpy-inv	numpy	pebble			[1.206449031829834, 1.4243988990783691, 1.6802358627319336]
0.013	cvxopt		cvxopt	pebble			[1.3285160064697266, 1.3291239738464355, 1.3356988430023193]
0.013	scipy		numpy	pebble			[1.2997868061065674, 1.3009181022644043, 1.3308861255645752]
0.014	cvxopt		numpy	pebble			[1.4072158336639404, 1.4204521179199219, 1.438748836517334]
0.014	numpy-solve	cvxopt	pebble			[1.4447040557861328, 1.4518849849700928, 1.48077392578125]
0.014	scipy		cvxopt	pebble			[1.3531968593597412, 1.403148889541626, 1.4369468688964844]
0.015	numpy-solve	numpy	pebble			[1.4570071697235107, 1.5110328197479248, 1.5445139408111572]
======> G1-and-A: True
0.091	numpy-solve	numpy	pebble			[9.112894058227539, 9.35825800895691, 9.501072883605957]
0.092	numpy-inv	numpy	pebble			[9.214257955551147, 9.227615118026733, 9.252326965332031]
0.097	cvxopt		numpy	pebble			[9.675685167312622, 9.757323980331421, 9.859316110610962]
0.1	    numpy-inv	cvxopt	pebble			[10.009752988815308, 10.035215854644775, 10.057719945907593]
0.101	numpy-solve	cvxopt	pebble			[10.08514404296875, 10.10825777053833, 11.330846071243286]
0.102	cvxopt		cvxopt	pebble			[10.170222997665405, 10.245206832885742, 10.260013103485107]
0.102	scipy		numpy	pebble			[10.228547096252441, 10.24993896484375, 10.272461891174316]
0.108	scipy		cvxopt	pebble			[10.838037014007568, 10.868491172790527, 11.006873846054077]
## alligator
======> G1-and-A: False
0.132	scipy		numpy	alligator		[13.156760931015015, 13.20937705039978, 13.245018005371094]
0.135	numpy-inv	numpy	alligator		[13.52037501335144, 13.607991933822632, 13.6927330493927]
0.137	scipy		cvxopt	alligator		[13.667144060134888, 13.721160888671875, 13.747316837310791]
0.139	cvxopt		cvxopt	alligator		[13.94179391860962, 14.05023193359375, 14.10900592803955]
0.139	cvxopt		numpy	alligator		[13.855720043182373, 14.023828983306885, 14.04738998413086]
0.139	numpy-inv	cvxopt	alligator		[13.898114919662476, 14.17380690574646, 16.31352400779724]
0.963	numpy-solve	cvxopt	alligator		[96.34445691108704, 96.71970295906067, 96.81968188285828]
1.053	numpy-solve	numpy	alligator		[105.34950017929077, 105.94838213920593, 108.16067695617676]
======> G1-and-A: True
0.865	scipy		numpy	alligator		[86.53094792366028, 86.58357977867126, 86.64779591560364]
0.958	cvxopt		numpy	alligator		[95.82389307022095, 100.48348307609558, 102.69772911071777]
1.103	cvxopt		cvxopt	alligator		[110.27161502838135, 110.30067610740662, 111.31506013870239]
1.109	scipy		cvxopt	alligator		[110.9220609664917, 111.01261711120605, 111.09977006912231]
2.258	numpy-solve	numpy	alligator		[225.7527379989624, 225.9823989868164, 226.62206482887268]
2.498	numpy-solve	cvxopt	alligator		[249.79713106155396, 250.60234904289246, 253.09039616584778]
2.573	numpy-inv	numpy	alligator		[257.2758159637451, 258.41576504707336, 262.6522388458252]
2.997	numpy-inv	cvxopt	alligator		[299.72991490364075, 300.09210896492004, 300.283362865448]
