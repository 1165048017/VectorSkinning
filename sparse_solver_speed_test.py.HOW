## The new simple test solver is this:
parallel -j 1 python sparse_solver_speed_test.py '{}' '|' grep Duration '>' sparse_solver_speed_test.py-raw_data/infinite'{}'.txt ::: 5 10 20 40 80

## Check output with:
sort -nr -t '[' -k 2 sparse_solver_speed_test.py-raw_data/infinite1.txt | cut -d ',' -f 1
### or Filter G1 with
sort -nr -t '[' -k 2 sparse_solver_speed_test.py-raw_data/infinite1.txt | cut -d ',' -f 1 | grep False
sort -nr -t '[' -k 2 sparse_solver_speed_test.py-raw_data/infinite1.txt | cut -d ',' -f 1 | grep True

---

## Run the timing tests.
for TEST in "simple_closed" "pebble" "alligator"
do
    python sparse_solver_speed_test.py "${TEST}" 2>&1 | tee "profiles/sparse_solver_speed_test.py.${TEST}.out"
done
# python sparse_solver_speed_test.py simple_closed 2>&1 | tee "profiles/sparse_solver_speed_test.py.simple_closed.out"

## Examine the results.
cd profiles

for TEST in "simple_closed" "pebble" "alligator"
do
    fgrep 'died' "sparse_solver_speed_test.py.${TEST}.out"
done

for TEST in "simple_closed" "pebble" "alligator"
do
    echo '##' "${TEST}"
    echo '======> G1-and-A: False'
    fgrep Duration "sparse_solver_speed_test.py.${TEST}.out" | cut -d 'k' -f 1 | sort -n | grep 'G1-and-A False'
    echo '======> G1-and-A: True'
    fgrep Duration "sparse_solver_speed_test.py.${TEST}.out" | cut -d 'k' -f 1 | sort -n | grep 'G1-and-A True'
done

In BBEdit, this gets us a lot of the way to a nice looking ascii layout.
Find: =======> ([^ ]+) Duration of ([^ ]+) build-dense ([^ ]+) ([^ ]+) G1-and-A (False|True) was (\[.*\]) a
Replace: \1\t\2\t\3\t\4\t\6
